getstrikes: 
# utils/getStrikes.py
"""
Utility to pick the nearest call & put strikes around an
at‑the‑money price, given the symbols available for the day.
"""

def extract_strike(symbol: str) -> float:
    """
    Parse strike from a symbol string like 'C-BTC-70000-20240601'.
    """
    try:
        return float(symbol.split("-")[3])
    except (IndexError, ValueError):
        raise ValueError(f"Cannot parse strike from {symbol}")

def get_nearest_strikes(underlying_price: float,
                        symbol_list: list,
                        tolerance: float = 0.02):
    """
    Return (call_symbol, put_symbol) whose strikes are within
    ±tolerance of underlying_price and closest to ATM.
    """
    calls, puts = [], []
    for sym in symbol_list:
        if sym.startswith("C-"):
            calls.append(sym)
        elif sym.startswith("P-"):
            puts.append(sym)

    # Compute distance to ATM for each
    def nearest(side_list):
        side_list = sorted(side_list,
                           key=lambda s: abs(extract_strike(s)-underlying_price))
        for s in side_list:
            if abs(extract_strike(s)-underlying_price) <= tolerance*underlying_price:
                return s
        return None

    call_sym = nearest(calls)
    put_sym  = nearest(puts)
    if call_sym is None or put_sym is None:
        raise RuntimeError("No strikes within tolerance.")
    return call_sym, put_sym
